esp32_ble_server:
  manufacturer: "Dak Keg Scale"
  manufacturer_data: [0xFF, 0xFF, 0xF1, 0x00]
  id: keg_scale
  services:
    - uuid: 5b0be147-b4d2-435c-a6b4-0cf09c349393
      advertise: true
      characteristics:
        - id: ble_estimated_beers
          description: "Estimated Beers"
          uuid: 547be5be-dddc-435a-82c9-2d68e26c507c
          read: true
          notify: true
          value: !lambda |-
            int beers = (int) round(id(estimated_beers).state);
            char buffer1[16];
            snprintf(buffer1, sizeof(buffer1), "%.2f", id(estimated_beers).state);
            return std::vector<uint8_t>(buffer1, buffer1 + strlen(buffer1));

        - id: ble_cal_wt
          description: "Calibrated Weight"
          uuid: 92a3e3b0-47a5-441c-974e-1f4ffbc6d371
          read: true
          notify: true
          value: !lambda |-
            char buffer2[16];
            snprintf(buffer2, sizeof(buffer2), "%.2f", id(calibrated_weight).state);
            return std::vector<uint8_t>(buffer2, buffer2 + strlen(buffer2));

        - id: ble_est_keg_wt
          description: "Estimated Keg Weight"
          uuid: 64bcd260-d3c2-40b6-85c2-438d3e07c042
          read: true
          notify: true
          value: !lambda |-
            char buffer3[16];
            snprintf(buffer3, sizeof(buffer3), "%.2f", id(estimated_keg_weight).state);
            return std::vector<uint8_t>(buffer3, buffer3 + strlen(buffer3));
  on_connect: 
    then:
      - logger.log: 
          level: INFO
          format: "BLE Client connected â€” Send Current Values"
      - lambda: |-
          //id(ble_estimated_beers).set_value(to_string((int)id(estimated_beers).state));
          //id(ble_cal_wt).set_value(to_string((int)id(calibrated_weight).state));
          //id(ble_est_keg_wt).set_value(to_string((int)id(estimated_keg_weight).state));
          id(ble_estimated_beers).notify();
          id(ble_cal_wt).notify();
          id(ble_est_keg_wt).notify();

interval:
  - interval: 10s
    then:
      - lambda: |-
          static float last_beers = -999;
          static float last_cal_weight = -999;
          static float last_keg_weight = -999;

          float current_beers = id(estimated_beers).state;
          float current_cal_weight = id(calibrated_weight).state;
          float current_keg_weight = id(estimated_keg_weight).state;

          bool should_notify_beers = abs(current_beers - last_beers) >= 1.0;
          bool should_notify_cal = abs(current_cal_weight - last_cal_weight) > 0.25;
          bool should_notify_keg = abs(current_keg_weight - last_keg_weight) > 0.25;

          if (should_notify_beers) {
            if (should_notify_beers) {
              id(ble_cal_wt).set_value(to_string(current_cal_weight));
              id(ble_cal_wt).notify();
              last_cal_weight = current_cal_weight;
              id(ble_est_keg_wt).set_value(to_string(current_keg_weight));
              id(ble_est_keg_wt).notify();
              last_keg_weight = current_keg_weight;
              id(ble_estimated_beers).set_value(to_string((int)current_beers));
              id(ble_estimated_beers).notify();
              last_beers = current_beers;
            }

            /*if (should_notify_cal) {
              id(ble_cal_wt).set_value(to_string(current_cal_weight));
              id(ble_cal_wt).notify();
              last_cal_weight = current_cal_weight;
            }

            if (should_notify_keg) {
              id(ble_est_keg_wt).set_value(to_string(current_keg_weight));
              id(ble_est_keg_wt).notify();
              last_keg_weight = current_keg_weight;
            }*/

            ESP_LOGI("main", "***BLE Server Update***");
            ESP_LOGI("main", "Estimated Beers %f", current_beers);
            ESP_LOGI("main", "Calibrated Weight %f", current_cal_weight);
            ESP_LOGI("main", "Estimated Keg Weight %f", current_keg_weight);
          }
    
